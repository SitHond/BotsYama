const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('bet')
        .setDescription('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ —Ä—É–ª–µ—Ç–∫—É.')
        .addIntegerOption(option => 
            option.setName('amount')
                .setDescription('–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏')
                .setRequired(false)) // –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
        .addStringOption(option => 
            option.setName('bettype')
                .setDescription('–¢–∏–ø —Å—Ç–∞–≤–∫–∏: —á–µ—Ä–Ω–æ–µ, –∫—Ä–∞—Å–Ω–æ–µ, —á–µ—Ç–Ω–æ–µ, –Ω–µ—á–µ—Ç–Ω–æ–µ, –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ (0-36)')
                .setRequired(false)), // –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
    category: 'entertainment',
    async execute(interaction) {
        const amount = interaction.options.getInteger('amount');
        const betType = interaction.options.getString('bettype');

        // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞
        if (!amount || !betType) {
            const rulesEmbed = new EmbedBuilder()
                .setColor('#FFFF00')
                .setTitle('üé∞ –ü—Ä–∞–≤–∏–ª–∞ —Ä—É–ª–µ—Ç–∫–∏')
                .setDescription(
                    `–í —ç—Ç–æ–π –∏–≥—Ä–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∏—Å—Ö–æ–¥—ã:
                    \n- **–ß–µ—Ä–Ω–æ–µ** –∏–ª–∏ **–ö—Ä–∞—Å–Ω–æ–µ**: —Å—Ç–∞–≤–∫–∞ x2.
                    \n- **–ß–µ—Ç–Ω–æ–µ** –∏–ª–∏ **–ù–µ—á–µ—Ç–Ω–æ–µ**: —Å—Ç–∞–≤–∫–∞ x2.
                    \n- **–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ (0-36)**: —Å—Ç–∞–≤–∫–∞ x36.
                    \n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n- \`/bet 500 black\`\n- \`/bet 500 17\`\n\n–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ!`
                )
                .setFooter({ text: '–°—Ç–∞–≤—å—Ç–µ —Ä–∞–∑—É–º–Ω–æ!' })
                .setTimestamp();

            return interaction.reply({ embeds: [rulesEmbed] });
        }

        const User = interaction.client.sequelize.models.User;
        const userId = interaction.user.id;
        const guildId = interaction.guild.id;

        const validNumbers = Array.from({ length: 37 }, (_, i) => i.toString());

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—Ç–∞–≤–∫–∏
        if (!['black', 'red', 'even', 'odd'].includes(betType.toLowerCase()) && !validNumbers.includes(betType)) {
            return interaction.reply({
                content: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—Ç–∞–≤–∫–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: —á–µ—Ä–Ω–æ–µ, –∫—Ä–∞—Å–Ω–æ–µ, —á–µ—Ç–Ω–æ–µ, –Ω–µ—á–µ—Ç–Ω–æ–µ –∏–ª–∏ —á–∏—Å–ª–æ (0-36).',
                ephemeral: true
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        const [user] = await User.findOrCreate({
            where: { id: userId, guildId },
            defaults: { balance: 1000 } // –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç
        });
        if (user.balance < amount) {
            const embed = new EmbedBuilder()
                .setColor('#FF0000') // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –æ—à–∏–±–∫–∏
                .setAuthor({ 
                    name: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!`, 
                    iconURL: 'https://media.discordapp.net/attachments/768105199151218690/837717853796565042/-2.png?ex=6701608c&is=67000f0c&hm=9698de4d28bf1627adbd5bdd109ac6f6d63a00859c5d7ecb8dcb2edb956ec5ca&=&format=webp&quality=lossless'
                })       
            return interaction.reply({ embeds: [embed], ephemeral: true });
        }

        // –°–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞ –∑–∞ —Å—Ç–∞–≤–∫—É
        user.balance -= amount;
        await user.save();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É–ª–µ—Ç–∫–∏
        const result = Math.floor(Math.random() * 37); // —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 36
        const color = result === 0 ? 'green' : result % 2 === 0 ? 'black' : 'red';

        let payoutMultiplier = 0;
        let win = false;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å—Ç–∞–≤–∫–∏
        if (betType.toLowerCase() === 'black' && color === 'black') {
            payoutMultiplier = 2;
            win = true;
        } else if (betType.toLowerCase() === 'red' && color === 'red') {
            payoutMultiplier = 2;
            win = true;
        } else if (betType.toLowerCase() === 'even' && result !== 0 && result % 2 === 0) {
            payoutMultiplier = 2;
            win = true;
        } else if (betType.toLowerCase() === 'odd' && result % 2 !== 0) {
            payoutMultiplier = 2;
            win = true;
        } else if (validNumbers.includes(betType) && parseInt(betType) === result) {
            payoutMultiplier = 36;
            win = true;
        }

        let description = `–†—É–ª–µ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –Ω–∞ ${result} (${color})\n`;

        if (win) {
            const winnings = amount * payoutMultiplier;
            user.balance += winnings; // –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –Ω–∞ –±–∞–ª–∞–Ω—Å
            await user.save();

            description += `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ **${winnings}** –º–æ–Ω–µ—Ç. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: **${user.balance}**.`;
        } else {
            description += `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **${user.balance}**.`;
        }

        // –°–æ–∑–¥–∞–µ–º embed –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        const embed = new EmbedBuilder()
            .setColor(win ? '#00FF00' : '#FF0000')
            .setTitle('üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É–ª–µ—Ç–∫–∏')
            .setDescription(description)
            .setFooter({ text: '–£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!' })
            .setTimestamp();

        await interaction.reply({ embeds: [embed] });
    },
};
